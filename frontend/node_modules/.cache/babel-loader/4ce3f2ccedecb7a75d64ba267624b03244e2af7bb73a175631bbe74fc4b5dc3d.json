{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Documents/workspace/react-practice/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const {\n    data\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n};\n_s(EventsPage, \"i3EQa2OpTaChqoa6mfJhC/QpjfA=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = () => {\n  defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","data","resolve","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/home/pedro/Documents/workspace/react-practice/frontend/src/pages/Events.js"],"sourcesContent":["import EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nconst EventsPage = () => {\n  const { data } = useLoaderData();\n\n  return <Await resolve={events}>\n\n  </Await>\n}\n\nexport default EventsPage;\n\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    return json({ message: 'Could not fetch events.' }, { status: 500 })\n  } else {\n    return response;\n  }\n}\n\nexport const loader = () => {\n  defer({\n    events: loadEvents()\n  })\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAK,CAAC,GAAGR,aAAa,EAAE;EAEhC,oBAAOK,OAAA,CAACF,KAAK;IAACM,OAAO,EAAEC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEtB;AACV,CAAC;AAAAP,EAAA,CANKD,UAAU;EAAA,QACGN,aAAa;AAAA;AAAAe,EAAA,GAD1BT,UAAU;AAQhB,eAAeA,UAAU;AAEzB,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,OAAOlB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAC1BpB,KAAK,CAAC;IACJQ,MAAM,EAAEM,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}